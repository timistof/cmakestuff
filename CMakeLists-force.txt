SET(CMAKE_SYSTEM_NAME Generic)
SET(CMAKE_SYSTEM_VERSION 1)
cmake_minimum_required(VERSION 3.7)

# specify the cross compiler
SET(CMAKE_C_COMPILER_WORKS 1)
SET(CMAKE_C_COMPILER arm-none-eabi-gcc)
set(CMAKE_C_COMPILER_WORKS TRUE)

SET(CMAKE_CXX_COMPILER arm-none-eabi-g++)
set(CMAKE_CXX_COMPILER_WORKS TRUE)

set(AS arm-none-eabi-as)
set(AR arm-none-eabi-ar)
set(OBJCOPY arm-none-eabi-objcopy)
set(OBJDUMP arm-none-eabi-objdump)
set(SIZE arm-none-eabi-size)

set(CMAKE_VERBOSE_MAKEFILE ON)

#this is just here to please the cmake compiler test
#SET(LINKER_SCRIPT ${CMAKE_SOURCE_DIR}/STM32F429IITx_FLASH.ld)

#Uncomment for hardware floating point
SET(FPU_FLAGS "-mfloat-abi=hard -mfpu=fpv4-sp-d16")
add_definitions(-DARM_MATH_CM4 -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -D__FPU_PRESENT=1 -D__FPU_USED=1 )

#Uncomment for software floating point
#SET(FPU_FLAGS "-mfloat-abi=soft")

#SET(DEBUG_FLAGS "-specs=rdimon.specs -lc -lrdimon -DDEBUG_BUILD")
SET(DEBUG_FLAGS "-specs=nosys.specs -DDEBUG_BUILD") #use for printf with floating point output
#SET(DEBUG_FLAGS "-specs=nosys.specs -specs=nano.specs -DDEBUG_BUILD") #use for printf without floating point output
SET(RELEASE_FLAGS "-specs=nosys.specs -specs=nano.specs -O2 -DRELEASE_BUILD")

SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${DEBUG_FLAGS}")
SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} ${DEBUG_FLAGS}")

SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${RELEASE_FLAGS}")
SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} ${RELEASE_FLAGS}")

SET(COMMON_FLAGS "-mcpu=cortex-m4 ${FPU_FLAGS} -mthumb -mthumb-interwork -ffunction-sections -fdata-sections -g -fno-common -fmessage-length=0")

SET(CMAKE_CXX_FLAGS_INIT "${COMMON_FLAGS} -std=c++11")
SET(CMAKE_C_FLAGS_INIT "${COMMON_FLAGS} -std=gnu99")
SET(CMAKE_EXE_LINKER_FLAGS_INIT "-Wl,-gc-sections -T ${LINKER_SCRIPT}")

PROJECT(TimeTosser C CXX ASM)
set(CMAKE_CXX_STANDARD 17)
#set(CMAKE_C_STANDARD 99)

add_definitions(-DARM_MATH_CM4 -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -D__FPU_PRESENT=1 )
add_definitions(-D__weak=__attribute__\(\(weak\)\) -D__packed=__attribute__\(\(__packed__\)\) -DUSE_HAL_DRIVER -DSTM32F429xx )

file(GLOB_RECURSE SOURCES "Middlewares/*.*" "Drivers/*.*" "Src/*.*" "Inc/*.*" "Src/usb/*.*" "Inc/usb/*.*" "platform/common/*.c" "platform/common/*.cpp" "Src/bootloader/*.cpp")

#exclude files that get overwritten by CubeMX and where we have custom code for that might otherwise interfere
list(REMOVE_ITEM SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/Src/main.c")
list(REMOVE_ITEM SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/Src/fmc.c")
list(REMOVE_ITEM SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/Src/usb_device.c")
list(REMOVE_ITEM SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/Src/usbd_audio_if.c")
list(REMOVE_ITEM SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/Src/usbd_conf.c")
list(REMOVE_ITEM SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/Src/usbd_desc.c")

#exclude items that are generated by CubeMX and we have platform specific implementations for
list(REMOVE_ITEM SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/Src/sai.c")
list(REMOVE_ITEM SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/Src/gpio.c")

#create sources for version 0.5
file(GLOB_RECURSE EXTRA_SOURCES_V05 "platform/v05/*.*")
SET(SOURCES_V05 ${SOURCES} ${EXTRA_SOURCES_V05})

#create sources for version 0.6
file(GLOB_RECURSE EXTRA_SOURCES_V06 "platform/v06/*.*")
SET(SOURCES_V06 ${SOURCES} ${EXTRA_SOURCES_V06})

#create sources for version 0.7
file(GLOB_RECURSE EXTRA_SOURCES_V07 "platform/v07/*.*")
SET(SOURCES_V07 ${SOURCES} ${EXTRA_SOURCES_V07})

#create sources for version 0.7
file(GLOB_RECURSE EXTRA_SOURCES_V08 "platform/v08/*.*")
SET(SOURCES_V08 ${SOURCES} ${EXTRA_SOURCES_V08})

include_directories(Inc Inc/usb Drivers/STM32F4xx_HAL_Driver/Inc Drivers/STM32F4xx_HAL_Driver/Inc/Legacy Middlewares/ST/STM32_USB_Device_Library/Core/Inc Middlewares/ST/STM32_USB_Device_Library/Class/AUDIO/Inc Drivers/CMSIS/Device/ST/STM32F4xx/Include Middlewares/Third_Party/FatFs/src Drivers/CMSIS/Include)

function(AddBootloaderTarget name definitions sources)
    SET(STARTUP ${CMAKE_SOURCE_DIR}/startup/startup_bootloader.s)
    SET(LINKER_SCRIPT ${CMAKE_SOURCE_DIR}/startup/bootloader.ld)

    SET(TARGET_NAME Bootloader-${name})
    AddTarget(${name} "${definitions}" "${STARTUP};${sources}")
endfunction()

function(AddApplicationTarget name definitions sources)
    SET(STARTUP ${CMAKE_SOURCE_DIR}/startup/startup_application.s)
    SET(LINKER_SCRIPT ${CMAKE_SOURCE_DIR}/startup/application.ld)

    SET(TARGET_NAME Application-${name})
    AddTarget(${TARGET_NAME} "${definitions}" "${STARTUP};${sources}")

    #run firmware image creator on application binary
    add_custom_command(TARGET ${TARGET_NAME} POST_BUILD
            COMMAND ./imagecreate \"${PROJECT_BINARY_DIR}/${TARGET_NAME}.bin\" 1.0.0.deadbeef
            WORKING_DIRECTORY "${PROJECT_BINARY_DIR}/../bin" )
endfunction()

function(AddTarget name definitions sources)
    add_executable(${name} ${sources})
    target_link_libraries(${name} "${CMAKE_CURRENT_SOURCE_DIR}/Drivers/CMSIS/Device/ST/STM32F4xx/Library/libarm_cortexM4lf_math.a")

    #message("Sources for target ${name}:")
    #message(${sources})

    #set_target_properties(${name} PROPERTIES LINK_DEPENDS ${LINKER_SCRIPT})

    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS_INIT} -Wl,-Map=${PROJECT_BINARY_DIR}/${name}.map")

    set(HEX_FILE ${PROJECT_BINARY_DIR}/${name}.hex)
    set(BIN_FILE ${PROJECT_BINARY_DIR}/${name}.bin)

    target_compile_definitions(${name} PRIVATE ${definitions})

    add_custom_command(TARGET ${name} POST_BUILD
            COMMAND ${CMAKE_OBJCOPY} -Oihex $<TARGET_FILE:${name}> ${HEX_FILE}
            COMMAND ${CMAKE_OBJCOPY} -Obinary $<TARGET_FILE:${name}> ${BIN_FILE}
            COMMENT "Building ${HEX_FILE}
        Building ${BIN_FILE}")

    add_custom_command(TARGET ${name} POST_BUILD COMMAND arm-none-eabi-size $<TARGET_FILE:${name}>)
endfunction()

function(AddCompoundTarget name definitions bootloadersources applicationsources)

    SET(BOOTLOADER_TARGET_NAME "Bootloader-${name}")
    SET(APPLICATION_TARGET_NAME "Application-${name}")

    AddBootloaderTarget(${name} "${definitions}" "${bootloadersources}")
    AddApplicationTarget(${name} "${definitions}" "${applicationsources}")

endfunction()

AddCompoundTarget("V0.5-Jack" "TT_VER=5; JACK=1" "${SOURCES_V05}" "${SOURCES_V05}")
AddCompoundTarget("V0.5-RCA" "TT_VER=5; RCA=1" "${SOURCES_V05}" "${SOURCES_V05}")
AddCompoundTarget("V0.6" "TT_VER=6" "${SOURCES_V06}" "${SOURCES_V06}")
AddCompoundTarget("V0.7" "TT_VER=7" "${SOURCES_V07}" "${SOURCES_V07}")
AddCompoundTarget("V0.8" "TT_VER=8" "${SOURCES_V08}" "${SOURCES_V08}")
